@model C3Spectra.APPositioningApp.Entity.FloorViewModel

@{
    ViewBag.Title = "ManageFloor";
}
@section Scripts {

    @*<script src="~/Scripts/jquery.validate.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
        <script src="~/Scripts/jquery-1.10.2.js"></script>*@
    @*@Scripts.Render("~/bundles/jqueryval")*@


}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css">
<script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"></script>
<link rel="stylesheet" href="../../Content/leaflet-search.css">
<script src="../scripts/leaflet-search.js"></script>

<style>
    .search-input {
        font-family: Courier;
    }

    .search-input,
    .leaflet-control-search {
        max-width: 400px;
    }
</style>

@if (!string.IsNullOrEmpty(ViewBag.Message))
{
    <script>
        alert('@ViewBag.Message');
    </script>
}

@if (!string.IsNullOrEmpty(ViewBag.msg))
{
    <br />
    <div style="text-align:center; color:red;">@ViewBag.msg</div>
}
else
{

    using (Html.BeginForm("ManageFloor", "Floor", FormMethod.Post, new { enctype = "multipart/form-data" }))

    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="container">
            <div class="row">
                <div class="col-xs-12 form-group">
                    <h3>
                        @if (Model.FloorID == 0)
                        {   
                            <span>Add</span>
                        }
                        else
                        {
                            <span>Update</span>
                        }
                        Floor
                    </h3>
                </div>
            </div>
            <form class="form-horizontal">
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">

                            <label class="col-md-4">Name</label>
                            @Html.HiddenFor(m => m.FloorID, new { @id = "hdnFloorID" })
                            @Html.HiddenFor(m => m.RemoveFloorPlan, new { @id = "hdnRemoveFloorPlan" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(m => m.FloorName, new { @class = " form-control" })
                                @Html.ValidationMessageFor(m => m.FloorName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">

                            <label class="col-md-4">Description</label>
                            <div class="col-md-8">
                                @Html.TextAreaFor(m => m.Description, new { @class = " form-control" })
                                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">

                            <label class="col-md-4">Floor Plan</label>
                            @*<input type="file" name="zip"class="col-md-8 form-group" />*@

                            @Html.TextBoxFor(m => m.FloorPlan, new { type = "file", name = "FloorPlan" })
                            <span>@ViewBag.FileUploadValidation</span>
                            @Html.ValidationMessageFor(m => m.FloorPlan, "", new { @class = "text-danger" })
                        </div>

                    </div>

                    <div class="col-md-6">
                        <div class="form-group">

                            <label class="col-md-4">Build</label>
                            <div class="col-md-8">
                                @Html.DropDownListFor(m => m.BuildingID, Model.Buildings, new { @class = "col-xs-8 form-control" })
                                @Html.ValidationMessageFor(m => m.BuildingID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.FloorPlanSHPPath))
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <div id="divFloorPlan">
                                    <a id="" href="@Url.Content(Model.FloorPlanSHPPath)" class="col-md-4">@Model.FloorPlanOrginalFileName</a>
                                    <span style="color:blue; cursor:pointer" id="btnRemoveFloorPlan">x</span>
                                    @Html.HiddenFor(m => m.FloorPlanSHPPath)
                                    @Html.HiddenFor(m => m.FloorPlanOrginalFileName)
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">

                            <label class="col-md-4">Floor No</label>
                            <div class="col-md-8">
                                @Html.TextBoxFor(m => m.FloorNo, new { @class = " form-control" })
                                @Html.ValidationMessageFor(m => m.FloorNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="col-md-6">Select Location of Floor Plan in map</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label class="col-md-3">Lat : </label>
                            <div class="col-md-8">
                                @Html.TextBoxFor(m => m.Latitude, new { @class = " form-control", @id = "txtDefaultAPLat" })
                                @Html.ValidationMessageFor(m => m.Latitude, "", new { @class = "text-danger" })
                            </div>
                            <label class="col-md-3">Lng : </label>
                            <div class="col-md-8">
                                @Html.TextBoxFor(m => m.Longitude, new { @class = " form-control", @id = "txtDefaultAPLng" })
                                @Html.ValidationMessageFor(m => m.Longitude, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <div id="map" style="height:200px;">
                            </div>
                        </div>

                    </div>
                </div>

                @*<div class="row">

                    <div class="col-md-6" style="width:800px; margin:0 auto">
                        <div class="form-group">*@

                <button type="submit" class="btn btn-default" name="btnSubmit" id="btnSubmit">Submit</button>


                <button type="button" class="btn btn-default" id="btnDelete">Delete</button>

                <button type="button" class="btn btn-default" id="btnback">Back</button>
                <input type="hidden" id="hdnBuildingID" name="hdnBuildingID" value="@ViewBag.BuildingID" />

                @*</div>
                        </div>
                    </div>*@
            </form>
        </div>//container

    }


    <script>
        $(document).ready(function () {
            $('#btnDelete').click(function () {
                var res = confirm('Delete this Floor information?');

                if (res) {
                    var floorID = $('#hdnFloorID').val();
                    $.ajax({
                        url: "../Floor/DeleteFloor",
                        data: { "floorID": floorID },
                        success: function (data) {
                            if (data.Result) {
                                alert('Floor information deleted successfully');
                                window.location.href = "../Floor/FloorList?buildingID=" + $('#hdnBuildingID').val();
                            }
                        },
                        error: function (a, b, c) {
                            alert('An error occured. Please try after sometime');
                        }
                    });
                }

            });


            $('#btnRemoveFloorPlan').click(function () {
                $('#hdnRemoveFloorPlan').val(true);
                $('#divFloorPlan').hide();
            });

            $('#btnback').click(function () {
                //window.location.href = "../Home/IndoorStep1?buildingID="+$('#hdnBuildingID').val();
                window.location.href = "../Floor/FloorList?buildingID=" + $('#hdnBuildingID').val();

            });



        });


    </script>
}


<script type="text/javascript" charset="UTF-8">
    var geo = L.geoJson();
    var curLocation = [39.3985454, -107.3123854];
    var m = null;
    var lineLayer = null;
    var layerGroup = new L.LayerGroup();
    var originLat = 0;
    var originLng = 0;

    $(document).ready(function () {
        loadBaseMap();
        var theMarker = {};

        m.on('click', function (e) {
            lat =  convertUptoDecimal6(e.latlng.lat);
            lon =convertUptoDecimal6( e.latlng.lng);


            //Clear existing marker,
            if (theMarker != undefined) {
                m.removeLayer(theMarker);
            };

            //Add a marker to show where you clicked.
            theMarker = L.marker([lat, lon]).addTo(m);

          document.getElementById('txtDefaultAPLat').value = lat;
          document.getElementById('txtDefaultAPLng').value = lon;

        });
    });

    function convertUptoDecimal6(digit) {
        var res = parseFloat(digit).toFixed(6);
        return res;
    }
    function loadBaseMap() {
        /*------------------------------------------------- Generate Map on page load starts ------------------------------------------------*/
        //----------------

        //1) Get Tiles
        var watercolor = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            maxZoom: 28,
            maxNativeZoom: 19
        });



        //create map on 'map' div at curLocation and zoom level 17 with Watercolor base map and geo layer
        m = L.map('map', {
            center: curLocation,
            zoom: 4,
            layers: [watercolor, geo]
        }).locate({ setView: true, maxZoom: 16 });;

        layerGroup.addTo(m);

        var baseMaps = {
            "BaseLayer": watercolor
        };
        var overlays = {
            "shapefile": geo
        };
        L.control.layers(baseMaps, overlays).addTo(m);


        //Add Search box controller
        m.addControl(new L.Control.Search({
            url: 'https://nominatim.openstreetmap.org/search?format=json&q={s}',
            jsonpParam: 'json_callback',
            propertyName: 'display_name',
            propertyLoc: ['lat', 'lon'],
            //marker: L.circleMarker([0, 0], { radius: 30 }),
            autoCollapse: true,
            autoType: false,
            minLength: 2
        }));

        /*----------------------------------------------- Generate Map on page load ends ----------------------------------------*/
    }
</script>