#pragma checksum "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bfed2161b3810871bd82ef6999c11ba33f9c227a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Indoor_IndoorStep2), @"mvc.1.0.view", @"/Views/Indoor/IndoorStep2.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Indoor/IndoorStep2.cshtml", typeof(AspNetCore.Views_Indoor_IndoorStep2))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\_ViewImports.cshtml"
using C3Spectra.APPositioningApp;

#line default
#line hidden
#line 2 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\_ViewImports.cshtml"
using C3Spectra.APPositioningApp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bfed2161b3810871bd82ef6999c11ba33f9c227a", @"/Views/Indoor/IndoorStep2.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"24e3fda1ab15c46d2ecb6906f9762200afb544e0", @"/Views/_ViewImports.cshtml")]
    public class Views_Indoor_IndoorStep2 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<C3Spectra.APPositioningApp.Entity.IndoorStep2ViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/jquery-1.10.2.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/turf.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(62, 1, true);
            WriteLiteral("\n");
            EndContext();
#line 3 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml"
  

    ViewBag.Title = "Indoor Step 2";

    Layout = "~/Views/Shared/_Layout.cshtml";


#line default
#line hidden
            BeginContext(154, 24, true);
            WriteLiteral("\n\n\n<h2>Manage AP</h2>\n\n\n");
            EndContext();
#line 16 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml"
 if (!string.IsNullOrEmpty(ViewBag.Result))
{

#line default
#line hidden
            BeginContext(224, 78, true);
            WriteLiteral("    <script>\n        $(document).ready(function () {\n            var result = ");
            EndContext();
            BeginContext(303, 25, false);
#line 20 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml"
                    Write(Html.Raw(@ViewBag.Result));

#line default
#line hidden
            EndContext();
            BeginContext(328, 60, true);
            WriteLiteral("\n            showMessage(result);\n        });\n    </script>\n");
            EndContext();
#line 24 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml"

}

#line default
#line hidden
            BeginContext(391, 12, true);
            WriteLiteral("\n\n\n\n<br />\n\n");
            EndContext();
            BeginContext(403, 50, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bfed2161b3810871bd82ef6999c11ba33f9c227a5629", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(453, 234, true);
            WriteLiteral("\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.4.0/dist/leaflet.css\">\n\n<script src=\"https://unpkg.com/leaflet@1.4.0/dist/leaflet.js\"></script>\n\n<script src=\"http://leaflet.calvinmetcalf.com/jam/shp/dist/shp.js\"></script>\n\n");
            EndContext();
            BeginContext(790, 1, true);
            WriteLiteral("\n");
            EndContext();
            BeginContext(791, 45, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bfed2161b3810871bd82ef6999c11ba33f9c227a7155", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(836, 152, true);
            WriteLiteral("\n\n<script src=\"https://npmcdn.com/leaflet-geometryutil\"></script> <!--For 5 degree angle Marker generation-->\n<!--start of search control references-->\n");
            EndContext();
            BeginContext(1072, 66, true);
            WriteLiteral("\n<link rel=\"stylesheet\" href=\"../../Content/leaflet-search.css\">\n\n");
            EndContext();
            BeginContext(1192, 831, true);
            WriteLiteral(@"
<style>
    .lnkbtn {
        color: blue;
        cursor: pointer;
        text-align: center;
        border: 1px solid #ccc;
        padding: 5px;
    }

    .search-input {
        font-family: Courier;
    }



    .search-input,
    .leaflet-control-search {
        max-width: 400px;
    }

    /* Icon when the collapsible content is shown */



    .btn:after {
        /*font-family: ""Glyphicons Halflings"";

        content: ""\e114"";

        float: right;

        margin-left: 15px;*/
    }



    /* Icon when the collapsible content is hidden */



    .btn.collapsed:after {
        content: ""\e080"";
    }



    .lnkbtn {
        color: blue;
        cursor: pointer;
        text-align: center;
    }
</style>





<script type=""text/javascript"" async="""" src=""https://ssl.google-analytics.com/ga.js""></script>

");
            EndContext();
            BeginContext(2099, 83, true);
            WriteLiteral("\n<script src=\"../scripts/leaflet-search.js\"></script>\n\n<!-- For azimuth Start -->\n\n");
            EndContext();
            BeginContext(2182, 45, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bfed2161b3810871bd82ef6999c11ba33f9c227a9800", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2227, 647, true);
            WriteLiteral(@"

<!-- For azimuth End-->
<!--end of search control references-->






<br />




<div class=""modal fade"" tabindex=""-1"" id=""loginModal""
     data-keyboard=""false"" data-backdrop=""static"">
    <div class=""modal-dialog modal-lg"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <button type=""button"" class=""close"" data-dismiss=""modal"">
                    ×
                </button>
                <h4 class=""modal-title"" id=""modalPopupTitle"">CPI Pro</h4>
            </div>
            <div class=""modal-body"">
                <div id=""divCalculateDeclination"" style=""display:none"">
                    ");
            EndContext();
            BeginContext(2875, 37, false);
#line 144 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml"
               Write(Html.Partial("_CalculateDeclination"));

#line default
#line hidden
            EndContext();
            BeginContext(2912, 109, true);
            WriteLiteral("\n                </div>\n                <div id=\"divCalculateHAAT\" style=\"display:none\">\n                    ");
            EndContext();
            BeginContext(3022, 30, false);
#line 147 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml"
               Write(Html.Partial("_CalculateHAAT"));

#line default
#line hidden
            EndContext();
            BeginContext(3052, 13509, true);
            WriteLiteral(@"
                </div>
            </div>
        </div>
    </div>
</div>

<br />


<div id=""divAzimuthCalculation"" style=""display:none"">

    <table>

        <tr>

            <td>

                1st AP :

            </td>

            <td>

                Latitude : <label id=""lblAzimthCalc1stAPlat""></label> &nbsp;&nbsp;

                Longitude : <label id=""lblAzimthCalc1stAPlng""></label>

            </td>

        </tr>

        <tr>

            <td>

                2nd AP :

            </td>

            <td>

                Latitude : <label id=""lblAzimthCalc2ndAPlat""></label> &nbsp;&nbsp;

                Longitude : <label id=""lblAzimthCalc2ndAPlng""></label>

            </td>

        </tr>

        <tr>

            <td>

                Azimuth value: <label id=""lblAzimthValue""></label><span id=""lblDegree"" style=""display:none"">&#176;</span>

            </td>



        </tr>

        <tr>
            <td><input type=""button"" value=""Clear"" id=""btnClear"" /></td>
        </tr>

    </ta");
            WriteLiteral(@"ble>

</div>

<br />



<br />



<input type=""hidden"" id=""hdnLat"" value="""" />

<input type=""hidden"" id=""hdnLong"" value="""" />



<br />

<br />



<div id=""divCoords"" style=""display:inline-block; border: 1px solid #0094ff""></div>

<div id=""divMarkerCoords"" style=""display:inline-block; border: 1px solid #ff6a00""></div>

<br />



<div id=""map"" style=""height:500px;"">

    <div id=""overlayDiv"" style=""position:absolute; z-index:1020; cursor:pointer; background-color:#fff; text-align:center; border:1px solid #ccc; display:inline-block; right:3px;bottom:15px;"">

        <span style=""padding:2px;"">2</span><br />

        <span style=""padding:2px;"">1</span><br />

        <span style=""padding:2px;"">B1</span><br />

        <span style=""padding:2px;"">B2</span><br />

    </div>

</div>

<div style=""display:none;"">

    <div id=""divAPPopup"" style=""width:230px"">

        <table style=""width:100%"">

            <tr>

                <td style=""width:25%""><label class=""col-xs-6"">Latitude</label></td>

                <td>");
            WriteLiteral(@"

                    <input type=""hidden"" id=""hdnAPID"" value="""" />

                    <span id=""lblPopupLat"" class=""col-xs-6 form-control""></span>

                </td>

            </tr>

            <tr style=""color:darkblue;"" id=""trExistingLat"">

                <td style=""width:25%""><label class=""col-xs-6"">Existing Latitude</label></td>

                <td>

                    <span id=""lblPopupExistingLat"" class=""col-xs-6 form-control""></span>

                </td>

            </tr>

            <tr>

                <td> <label class=""col-xs-6"">Longitude</label></td>

                <td> <span id=""lblPopupLng"" class=""col-xs-6 form-control""></span></td>

            </tr>

            <tr style=""color:darkblue;"" id=""trExistingLng"">

                <td style=""width:25%""><label class=""col-xs-6"">Existing Longitude</label></td>

                <td>

                    <span id=""lblPopupExistingLng"" class=""col-xs-6 form-control""></span>

                </td>

            </tr>

            <tr>

");
            WriteLiteral(@"                <td> <label class=""col-xs-6"">Name</label></td>

                <td> <textarea rows=""1"" id=""txtPopupName"" class=""col-xs-6 form-control""></textarea></td>

            </tr>

            <tr>

                <td> <label class=""col-xs-6"">Description</label></td>

                <td> <textarea rows=""2"" id=""txtPopupDesc"" class=""col-xs-6 form-control""></textarea></td>

            </tr>

            <tr>

                <td colspan=""2"" style=""text-align:center; padding:5px;"" id=""tdCtrls"">

                    <span class=""lnkbtn"" id=""lnkbtnSave"">Save</span>&nbsp;&nbsp;
                    <span class=""lnkbtn"" id=""lnkbtnDelete"">Delete</span>  &nbsp;&nbsp;
                    <span class=""lnkbtn"" id=""lnkbtnManageParameters"">Manage Parameters</span>
                </td>

            </tr>

            <tr>
                <td colspan=""2"" style=""text-align:center; padding:10px;"">
                    <span class=""lnkbtn"" id=""btnShowCalculateDeclination"">Calculate Declination</span>&nbsp;&nbsp;
      ");
            WriteLiteral(@"              <span class=""lnkbtn"" id=""btnShowCalculateHAAT"">Calculate HAAT</span>  &nbsp;&nbsp;
                </td>
            </tr>

        </table>

    </div>

</div>



<script type=""text/javascript"" charset=""UTF-8"">
    var geo = L.geoJson();
    var curLocation = [39.3985454, -107.3123854];
    var m = null;
    var lineLayer = null;
    var layerGroup = new L.LayerGroup();
    var originLat = 0;
    var originLng = 0;
    var imarkersLoad = 0;
    var marker = null;
    var azimuthLine=null;
    var isAzimuthCalcInProgress=false;
    var isAzimuthCalcInProgressFirst=false;
    var allMarkersObjArray = [];
    var imarkersArray=0;
    var azimuthStartAPLat = null;

    var azimuthStartAPLng = null;
    var restrictAzimuthLine=0;
    var azimuthEndAPLat = null;

    var azimuthEndAPLng = null;
    var aps = null;
    var lineLayerNew = null;
    var markersLoad = [];
    var markersCreated = [];

    var marker = null;

    var imarkersCreated = 0;
    var cehckFirstAPOfOutdoor = false;
    var curr");
            WriteLiteral(@"entMarker;

    var currentDraggedMarkerStartLat = null;
    var currentDraggedMarkerStartLng = null;

    var popupMarkup = $($('#divAPPopup').html()).on('click', '.lnkbtn', function () {
        var ctrl = $(this).attr('id');

        switch (ctrl) {
            case 'lnkbtnSave':
                SaveAPData();
                break;
            case 'lnkbtnDelete':
                Delete();
                break;
            case 'lnkbtnManageParameters':
                manageParameters();
                break;
            case 'btnShowCalculateDeclination':
                showCalculateDeclinationfn();
                break;
            case 'btnShowCalculateHAAT':
                showCalculateHAAT();
                break;
        }

    })[0];

    $(document).ready(function () {
        loadBaseMap();

        loadAPs();

        $('#btnAddAP').click(function () {
            cehckFirstAPOfOutdoor = true;
            m.on('click', function (e) {
                if(cehckFirstAPOfOutdoor == true)
      ");
            WriteLiteral(@"          {
                    lat = e.latlng.lat;
                    lon = e.latlng.lng;
                    curLocation = [lat,lon];
                    markersCreated = new L.marker(curLocation, {

                        draggable: 'true'

                    }).bindPopup(popupMarkup, { minWidth: 230, maxHeight: ""auto"" });

                    markersCreated.APID = 0;

                    $('#hdnAPID').val(0);

                    $('#lblPopupLat').text(lat);

                    $('#lblPopupLng').text(lon);

                    markersCreated.on('dragend', function (event) {

                        var startLat = currentDraggedMarkerStartLat;

                        var startLng = currentDraggedMarkerStartLng;

                        currentDraggedMarkerStartLat = null;

                        currentDraggedMarkerStartLng = null;

                        onAPDragEnd(event, this, startLat, startLng);

                    });

                    markersCreated.on('click', function (event) {  //new a");
            WriteLiteral(@"dded
                        onAPClick(this);
                    });

                    m.addLayer(markersCreated);
                    imarkersCreated++;
                    cehckFirstAPOfOutdoor = false;
                    //Add a marker to show where you clicked.
                }
            });

        });





        $('#btnback').click(function () {
            //window.location.href = ""../Home/IndoorStep1?buildingID=""+$('#hdnBuildingID').val();
            window.location.href = ""../Home/Dashboard"";

        });

    });



    function onAPDragEnd(event, obj, currentDraggedMarkerStartLat, currentDraggedMarkerStartLng) {



        var position = obj.getLatLng();



        originLat = convertUptoDecimal6(position.lat);

        originLng = convertUptoDecimal6(position.lng);

        if (lineLayerNew != null) {

            layerGroup.removeLayer(lineLayerNew);

        }

        generateInitialLines(obj);

        generatedFinalLines(obj, currentDraggedMarkerStartLat, currentDraggedMarkerStart");
            WriteLiteral(@"Lng);



    }


    function onAPClick(obj) {

        //if(restrictAzimuthLine<2){

        setAzimthAPDetails(obj);

        var position = obj.getLatLng();
        position.lat = convertUptoDecimal6(position.lat);
        position.lng = convertUptoDecimal6(position.lng);

        $('#hdnLat').val(position.lat);

        $('#hdnLong').val(position.lng);


        if ($('#hdnAPID').val() == """")
            $('#hdnAPID').val(0);

        if (obj.Lat != undefined)
            obj.Lat = convertUptoDecimal6(obj.Lat);

        if (obj.Long != undefined)
            obj.Long = convertUptoDecimal6(obj.Long);

        if (obj.APID != undefined && obj.APID != 0)
            $('#hdnAPID').val(obj.APID);

        if (obj.Lat != undefined)
            $('#lblPopupExistingLat').text(obj.Lat);

        if (obj.Long != undefined)
            $('#lblPopupExistingLng').text(obj.Long);


        $('#hdnAPID').val(obj.APID);


        if (obj.Lat != undefined && obj.Long != undefined) {
            if (position.lat != obj.Lat");
            WriteLiteral(@") {

                $('#lblPopupLat').text(position.lat);

                $('#trExistingLat').show();

            }

            else {

                $('#lblPopupLat').text(obj.Lat);

                $('#trExistingLat').hide();

            }



            if (position.lng != obj.Long) {

                $('#lblPopupLng').text(position.lng);

                $('#trExistingLng').show();

            }

            else {

                $('#lblPopupLng').text(obj.Long);

                $('#trExistingLng').hide();

            }
        }//End of  if(this.Lat!=undefined && this.Long!=undefined)
        else {
            $('#trExistingLat').hide();
            $('#trExistingLng').hide();

            $('#lblPopupLat').text(position.lat);

            $('#lblPopupLng').text(position.lng);
        }


        if (obj.Name != undefined && obj.Name != '') {
            //$('#txtPopupName').text(obj.Name);
            document.getElementById('txtPopupName').value = obj.Name;
        }
        else {
       ");
            WriteLiteral(@"     //$('#txtPopupName').text('');
            document.getElementById('txtPopupName').value = """";
        }

        if (obj.Description != undefined && obj.Description != '') {
            //$('#txtPopupDesc').text(obj.Description);
            document.getElementById('txtPopupDesc').value = obj.Description;
        }
        else {
            //$('#txtPopupDesc').text('');
            document.getElementById('txtPopupDesc').value = """";
        }

        currentMarker = obj;



        obj.openPopup();

        //if(isAzimuthCalcInProgress||isAzimuthCalcInProgressFirst){
        if(isAzimuthCalcInProgress){
            obj.closePopup();
        }

        //}
        //else
        //{
        //    obj.closePopup();
        //}
    }

    function SaveAPData() {

        var apid = $('#hdnAPID').val();

        var newlat = $('#lblPopupLat').text();

        var newlong = $('#lblPopupLng').text();

        var name = $('#txtPopupName').val();

        var desc = $('#txtPopupDesc').val();



        $.aj");
            WriteLiteral(@"ax({

            url: ""../Home/ManageAPForOutdoor"",

            data: {
                ""apid"": apid,

                ""newlat"": newlat,

                ""newlong"": newlong,

                ""name"": name,

                ""desc"": desc


            },

            success: function (data) {

                if (data.Result) {

                    alert('AP saved successfully');

                    currentMarker.APID = data.APID;

                    currentMarker.Lat = newlat;

                    currentMarker.Long = newlong;

                    currentMarker.Name = name;

                    currentMarker.Description = desc;

                }

            },

            error: function (a, b, c) {

                alert('An error occured. Please try after sometime');

                //currentMarker = null;

            }

        });

    }

    function Delete() {



        var res = confirm('Delete this AP?');



        if (res) {

            var apID = $('#hdnAPID').val();

            $.ajax({");
            WriteLiteral(@"

                url: ""../Home/DeleteManageAPNew"",

                data: { ""apID"": apID },

                success: function (data) {

                    if (data.Result) {

                        alert('AP deleted successfully');

                        m.closePopup();

                        //currentMarker = null;

                        m.removeLayer(currentMarker);

                    }

                },

                error: function (a, b, c) {

                    alert('An error occured. Please try after sometime');

                    //currentMarker = null;

                }

            });

        }

    }

    function convertUptoDecimal6(digit) {
        var res = parseFloat(digit).toFixed(6);
        return res;
    }

    function convertUptoDecimal2(digit) {
        var res = parseFloat(digit).toFixed(2);
        return res;
    }

    function manageParameters() {
        //redirect user to Manage AP Parameters page


        var floor = 0;
        window.location.href = ""..");
            WriteLiteral("/Home/ManageAPParameters?apid=\" + $(\'#hdnAPID\').val() + \"&lat=\" + $(\'#lblPopupLat\').text() + \"&lng=\" + $(\'#lblPopupLng\').text() + \"&floorID=\" + floor;\n    }\n\n    function loadAPs() {\n\n        aps= ");
            EndContext();
            BeginContext(16562, 76, false);
#line 759 "C:\Arshad\CPIPROBACKUP_SHADAB\C3Spectra.APPositioningApp\C3Spectra.APPositioningApp\Views\Indoor\IndoorStep2.cshtml"
        Write(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.APs) as String));

#line default
#line hidden
            EndContext();
            BeginContext(16638, 13675, true);
            WriteLiteral(@";

        for (imarkersLoad = 0; imarkersLoad < aps.length; imarkersLoad++) {

            var curLoc = [aps[imarkersLoad].Lat, aps[imarkersLoad].Long];

            markersLoad[imarkersLoad] = new L.marker(curLoc, {

                draggable: 'true'

            }).bindPopup(popupMarkup,{minWidth:230,maxHeight:""auto""});

            markersLoad[imarkersLoad].APID = aps[imarkersLoad].APID;

            markersLoad[imarkersLoad].Lat = aps[imarkersLoad].Lat;

            markersLoad[imarkersLoad].Long = aps[imarkersLoad].Long;

            markersLoad[imarkersLoad].Name = aps[imarkersLoad].Name;

            markersLoad[imarkersLoad].Description = aps[imarkersLoad].Description;

            markersLoad[imarkersLoad].on('dragstart', function (event) {
                currentDraggedMarkerStartLat = this._latlng.lat;
                currentDraggedMarkerStartLng = this._latlng.lng;
            });

            markersLoad[imarkersLoad].on('dragend', function (event) {
                var startLat = currentDragged");
            WriteLiteral(@"MarkerStartLat;
                var startLng = currentDraggedMarkerStartLng;
                currentDraggedMarkerStartLat = null;
                currentDraggedMarkerStartLng = null;
                onAPDragEnd(event,this,startLat,startLng);
            });





            markersLoad[imarkersLoad].on('click', function (event) {  //new added
                onAPClick(this);
            });

            m.addLayer(markersLoad[imarkersLoad]);

        }

        imarkersLoad-=1;

    }



    function loadBaseMap() {
        /*------------------------------------------------- Generate Map on page load starts ------------------------------------------------*/
        //----------------

        //1) Get Tiles


        var watercolor = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
            maxZoom: 28,
            maxNativeZoom: 19
        });



        //create map on 'map' div at curLocation and zoom level 17 with Watercolor base map and geo layer
        m = L.map('map', {
              center");
            WriteLiteral(@": curLocation,
            zoom: 4,
            layers: [watercolor, geo]
        });
        m.locate({setView: true, maxZoom: 16
            ,watch:true
        });

        //  .locate({ setView: true, maxZoom: 16,watch:true });







        layerGroup.addTo(m);

        var baseMaps = {
            ""BaseLayer"": watercolor
        };
        var overlays = {
            ""shapefile"": geo
        };
        L.control.layers(baseMaps, overlays).addTo(m);


        //Add Search box controller

        var searchControl = new L.Control.Search({
            url: 'https://nominatim.openstreetmap.org/search?format=json&q={s}',
            jsonpParam: 'json_callback',
            propertyName: 'display_name',
            propertyLoc: ['lat', 'lon'],
            //marker: L.circleMarker([0, 0], { radius: 30 }),
            autoCollapse: true,
            autoType: false,
            minLength: 2
        })



        searchControl.on('search:locationfound', function(e) {
            m.setZoom(18);
        });

   ");
            WriteLiteral(@"     m.addControl(searchControl);

        /*----------------------------------------------- Generate Map on page load ends ----------------------------------------*/
    }



    function generateInitialLines(obj) {
        var coords = [];

        var coords1 = [];



        m.attributionControl.setPrefix(false);

        var radiusInKm = 0.5;

        for (var i = 5; i <= 360; i = i + 5) {

            var marker = L.marker(curLocation);

            //Generate Point at given degree of angle where line will end

            var to = L.GeometryUtil.destination(marker.getLatLng(), i, radiusInKm * 1000);

            coords.push([to.lng, to.lat]);
        }



        for (var i = 0; i < coords.length; i++) {

            coords1.push(

                [

                    [originLng, originLat],//Start Point

                    [coords[i][0], coords[i][1]] //End Point

                ]

            )

        }



        lines = {

            ""type"": ""Feature"",

            ""properties"": {},

       ");
            WriteLiteral(@"     ""geometry"": {

                ""type"": ""MultiLineString"",

                ""coordinates"": coords1

            }

        }



        var lineStyle = {

            ""color"": ""#000"",

            ""weight"": 1,

            ""opacity"": 0.65

        };





        lineLayer = L.geoJSON(lines, {

            style: lineStyle

        });



        layerGroup.addLayer(lineLayer);

    }

    function generatedFinalLines(obj, currentDraggedMarkerStartLat, currentDraggedMarkerStartLng) {

        /***Approach 3 starts***/



        var newCoords = [];

        var newCoords1 = [];



        //From 360 Degree lines extract 1 line coordinates at a time, prepare line feature and check intersection

        for (var i = 0; i < lines.geometry.coordinates.length; i++) {

            var testLine = {

                ""type"": ""Feature"",

                ""properties"": {},

                ""geometry"": {

                    ""type"": ""LineString"",

                    ""coordinates"": lines.geometry.coordinates[i]

     ");
            WriteLiteral(@"           }

            }



            var intersects = turf.lineIntersect(multiLineString, testLine);



            var originNintersections = {

                origin: [originLng, originLat],

                intersections: intersects

            };





            /*------------------------ Client side logic for Farest distance calculation starts --------------------*/





            //1) Traverse 'intersects' array and prepare 'innerIntersectionPoints' array - Logic: consider values at even indexes



            var innerIntersectionPoints = [];

            for (var j = 0; j < intersects.features.length; j++) {

                if (j % 2 != 0)// For 1 inersection Turf.js 'lineIntersect' function returns to intersection points. We are assuming 1st of the 2 will be used for working

                {

                    var intersectPoint = intersects.features[j].geometry.coordinates;

                    innerIntersectionPoints.push(intersectPoint);

                }

            }





     ");
            WriteLiteral(@"       //2) Determine the Farest Intersection point

            var farestInsersectionPoint = [];

            var farestDistance = 0;



            for (var k = 0; k < innerIntersectionPoints.length; k++) {

                var distance = getDistanceFromLatLonInKm(originLng, originLat, innerIntersectionPoints[k][0], innerIntersectionPoints[k][1])

                if (distance > farestDistance) {

                    farestDistance = distance;

                    farestInsersectionPoint = innerIntersectionPoints[k];

                }

            }//End of Farest distance loop



            newCoords.push([farestInsersectionPoint[0], farestInsersectionPoint[1]]);//End Point



            /*------------------------ Client side logic for Farest distance calculation ends --------------------*/



        }// End of For Loop for interating 5 degree lines



        var insidePolgon = true;

        for (var l = 0; l < newCoords.length; l++) {

            if (newCoords[l].includes(undefined)) {

           ");
            WriteLiteral(@"     insidePolgon = false;

                break;

            }

        }





        if (insidePolgon) {

            for (var i = 0; i < newCoords.length; i++) {

                newCoords1.push(

                    [

                        [originLng, originLat],//Start Point

                        [newCoords[i][0], newCoords[i][1]] //End Point

                    ]

                )

            }



            //Generate new line layer

            var lineNew = {

                ""type"": ""Feature"",

                ""properties"": {},

                ""geometry"": {

                    ""type"": ""MultiLineString"",

                    ""coordinates"": newCoords1

                }

            }



            var lineStyleNew = {

                ""color"": ""#ff0000"",

                ""weight"": 1,

                ""opacity"": 0.65

            };



            lineLayerNew = L.geoJSON(lineNew, {

                style: lineStyleNew

            });



            layerGroup.addLayer(lineLayerNew);
");
            WriteLiteral(@"
        }

        else {

            alert('Please click inside ploygon.');



            //set marker back to default location
            //var curPos = this.getLatLng();

            obj.setLatLng([currentDraggedMarkerStartLat, currentDraggedMarkerStartLng], {
                draggable: 'true'

            })

        }



        //Remove Intial Line layer

        layerGroup.removeLayer(lineLayer);



        /***Approach 3 ends***/

    }



    /**----------------------------------------------------Distance calculation script starts ----------------------------------------------------**/

    function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {

        var R = 6371; // Radius of the earth in km

        var dLat = deg2rad(lat2 - lat1);  // deg2rad below

        var dLon = deg2rad(lon2 - lon1);

        var a =

            Math.sin(dLat / 2) * Math.sin(dLat / 2) +

            Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *

            Math.sin(dLon / 2) * Math.sin(dLon / 2)

       ");
            WriteLiteral(@"     ;

        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        var d = R * c; // Distance in km

        return d;

    }



    function deg2rad(deg) {

        return deg * (Math.PI / 180)

    }



    /**----------------------------------------------------Distance calculation script ends ----------------------------------------------------**/



</script>





<script type=""text/javascript"">





    function showCalculateDeclinationfn()
    {
        $('#var').html('');
        $('#lat').val($('#lblPopupLat').text());
        $('#lon').val($('#lblPopupLng').text());

        $('#modalPopupTitle').text('CPI Pro - Calculate Declination');

        $('#divCalculateDeclination').css('display','block');

        $('#divCalculateHAAT').css('display','none');

        $(""#loginModal"").modal('show');
    }


    function showCalculateHAAT() {

        $('#txtlat').val($('#lblPopupLat').text());
        $('#txtlon').val($('#lblPopupLng').text());

        $('#modalPopupTitle').text('CPI Pro - Ca");
            WriteLiteral(@"lculate HAAT');

        $('#divCalculateHAAT').css('display','block');

        $('#divCalculateDeclination').css('display','none');

        $(""#loginModal"").modal('show');
    };


        $(document).ready(function () {

        $(""#btnHideModal"").click(function () {

            $('#divCalculateHAAT').css('display','none');

            $('#divCalculateDeclination').css('display','none');

            $(""#loginModal"").modal('hide');

        });

    });

</script>



<script>

    $(document).ready(function () {

        $('#btnAzimuthCalc').click(function () {

            isAzimuthCalcInProgress=true;

            alert('Select Start AP');



        });

        $('#btnClear').click(function () {

            $('#divAzimuthCalculation').hide();

            m.removeLayer(azimuthLine);

            isAzimuthCalcInProgress=false;

            azimuthStartAPLat=null;

            azimuthStartAPLng=null;

            azimuthEndAPLat=null;

            azimuthEndAPLng=null;

            $('#lblAzimthCalc1");
            WriteLiteral(@"stAPlat').text('');

            $('#lblAzimthCalc1stAPlng').text('');

            $('#lblAzimthCalc2ndAPlat').text('');

            $('#lblAzimthCalc2ndAPlng').text('');

            $('#lblAzimthValue').text('');
            $('#lblDegree').hide();

        });



    });



    function setAzimthAPDetails(marker){
        var pos = marker.getLatLng();

        if(isAzimuthCalcInProgress){



            $('#divAzimuthCalculation').show();

            var pos = marker.getLatLng();
            if(isAzimuthCalcInProgress){

                $('#divAzimuthCalculation').show();

                if (azimuthStartAPLat==null && azimuthStartAPLat==undefined) {

                    azimuthStartAPLat = convertUptoDecimal6(pos.lat);
                    azimuthStartAPLng =  convertUptoDecimal6(pos.lng);

                    $('#lblAzimthCalc1stAPlat').text(azimuthStartAPLat);
                    $('#lblAzimthCalc1stAPlng').text(azimuthStartAPLng);

                    alert('Select End AP');
                }
       ");
            WriteLiteral(@"         else {

                    azimuthEndAPLat =convertUptoDecimal6(pos.lat);
                    azimuthEndAPLng = convertUptoDecimal6(pos.lng);

                    $('#lblAzimthCalc2ndAPlat').text(azimuthEndAPLat);
                    $('#lblAzimthCalc2ndAPlng').text(azimuthEndAPLng);

                }
                if(azimuthEndAPLat!=null && azimuthStartAPLat!=null ){
                    var point1 = turf.point([azimuthStartAPLng, azimuthStartAPLat]);
                    var point2 = turf.point([ azimuthEndAPLng,azimuthEndAPLat]);

                    var bearing = turf.bearing(point1, point2);
                    var azimuth = turf.bearingToAzimuth(bearing);
                    azimuth=convertUptoDecimal2(azimuth);
                    $('#lblAzimthValue').text(azimuth)+$('#lblDegree').show();


                    var latlang = [
           [azimuthStartAPLat, azimuthStartAPLng], [azimuthEndAPLat, azimuthEndAPLng]
                    ];
                    var azimuthLineOptions = {color:'red',");
            WriteLiteral(@"weight:2,opacity:.7,dashArray:'10,5',lineJoin: 'round'};
                    azimuthLine = L.polyline(latlang , azimuthLineOptions);
                    azimuthLine.bindTooltip(""ow yeah"", {permanent: true});
                    azimuthLine.addTo(m);
                    //isAzimuthCalcInProgress=false;

                }
            }
        }
    }


</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<C3Spectra.APPositioningApp.Entity.IndoorStep2ViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
